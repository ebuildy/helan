{% set _image_flavor = "-" ~ elk.flavor if elk.flavor is defined and elk.flavor|length else "" %}
image: "{{ config.image | default("docker.elastic.co/elasticsearch/elasticsearch" ~ _image_flavor) }}"
imageTag: "{{ config.imageTagÂ | default(elk.version)}}"

{% if config.imagePullSecret is defined %}
imagePullPolicy: Always
imagePullSecrets:
- name: "{{ config.imagePullSecret }}"
{% endif %}

{% set config_role = config.role|default("") %}

labels:
  component_name: {{ helan_component.fullname }}
  {% if config_role != "" %}role: {{ config_role }}{% endif %}

replicas: {{ config.replicas | default(1) }}

clusterName: {{ config.clusterName }}
nodeGroup: {{ "master" if config_role == "master" else config.nodeGroup }}

{% if config.resources.heap is defined %}
esJavaOpts: "-Xmx{{ config.resources.heap }} -Xms{{ config.resources.heap }}"
{% endif %}

{% if config.resources is defined %}
resources:
  requests:
    memory: "{{ config.resources.memory }}"
    cpu: "{{ config.resources.cpu }}"
{% if config.resources.limits is defined %}
  limits:
    memory: "{{ config.resources.limits.memory }}"
    cpu: "{{ config.resources.limits.cpu }}"
{% endif %}
{% endif %}

{% if config.config is defined
and config.config.xpack is defined
and config.config.xpack.security is defined
and config.config.xpack.security.enabled %}
extraEnvs:
- name: 'ELASTIC_USERNAME'
  valueFrom:
    secretKeyRef:
      name: {{ component_name }}-elastic-credentials
      key: username
- name: 'ELASTIC_PASSWORD'
  valueFrom:
    secretKeyRef:
      name: {{ component_name }}-elastic-credentials
      key: password

secretMounts:
- name: security-tls-certs
  secretName: {{ component_name }}-security-tls-certs
  path: /usr/share/config/config/certs
{% endif %}

sysctlInitContainer:
  enabled: {{ pod_has_priviligied_policy }}

{% if config_role == "master" %}
roles:
  master: "true"
  ingest: "true"
  data: "false"
{% elif config_role == "data" %}
roles:
  master: "false"
  ingest: "true"
  data: "true"
{% else %}
roles:
  master: "true"
  ingest: "true"
  data: "true"
{% endif %}

{% if config.ingress is defined %}
ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.org/client-max-body-size: "0"
  hosts:
  - {{ config.ingress.host }}
{% if ingress_use_tls %}
  tls:
  - hosts:
    - {{ config.ingress.host }}
    secretName: {{ config.ingress.certif.name }}
{% endif %}
{% else %}
ingress:
  enabled: false
{% endif %}

# Permit co-located instances for solitary minikube virtual machines.
#antiAffinity: "soft"

# Shrink default JVM heap.
#esJavaOpts: "-Xmx512M -Xms512M"

#esConfig:
#  config.yml: |
#    discovery:
#      type: single-node
#      seed_hosts: ""

{% if config.config_elasticsearch is defined %}
esConfig:
  elasticsearch.yml: |
    {{ config.config_elasticsearch | to_nice_yaml | indent(4) }}
{% endif %}


{% if config.storage is defined %}
volumeClaimTemplate:
  accessModes: [ "ReadWriteOnce" ]
  storageClassName: {{ config.storage.class|default(storage_class) }}
  resources:
    requests:
      storage: {{ config.storage.size }}
{% else %}
persistence:
  enabled: false
{% endif %}

{% if config.keystore is defined %}
keystore:
{% for secret in config.keystore.secrets -%}
- secretName: {{ secret }}
{% endfor -%}
{% endif %}

maxUnavailable: 2
minimumMasterNodes: 2

readinessProbe:
  failureThreshold: 10
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 3
  timeoutSeconds: 10

# https://www.elastic.co/guide/en/config/reference/current/cluster-health.html#request-params wait_for_status
clusterHealthCheckParams: "timeout=5s"
